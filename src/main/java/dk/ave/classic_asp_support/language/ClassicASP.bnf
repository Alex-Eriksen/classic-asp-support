{
    parserClass="dk.ave.classic_asp_support.language.parser.ASPParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="ASP"
    psiImplClassSuffix="Impl"
    psiPackage="dk.ave.classic_asp_support.language.psi"
    psiImplPackage="dk.ave.classic_asp_support.language.psi.impl"

    elementTypeHolderClass="dk.ave.classic_asp_support.language.psi.ASPTypes"
    elementTypeClass="dk.ave.classic_asp_support.language.psi.ASPElementType"
    tokenTypeClass="dk.ave.classic_asp_support.language.psi.ASPTokenType"
}


/*
 * Root entry for ASP file.
 */
aspFile ::= aspContent*;

/*
 * Each content item can be HTML content, an ASP block, or a newline.
 */
private aspContent ::= htmlContent | aspBlock | CRLF;

/*
 * HTML content unchanged...
 */
htmlContent ::= HTML_TEXT
                | HTML_LESS_THAN
                | htmlElement
                | htmlComment;

htmlElement ::= HTML_TAG;
htmlComment ::= HTML_COMMENT_START htmlContent* HTML_COMMENT_END;

/*
 * ASP block: supports both code and echo types.
 */
aspBlock ::= aspCodeBlock | aspEchoBlock;

aspCodeBlock ::= ASP_CODE_START aspStatements? ASP_CODE_END;
aspEchoBlock ::= ASP_ECHO_START aspExpression? ASP_CODE_END;

/*
 * The sequence of statements inside an ASP block.
 */
aspStatements ::= aspStatement+;

/*
 * A statement may be one of several forms. We add "aspProcedure" to support
 * function and sub definitions.
 */
aspStatement ::= aspProcedure
               | aspIfStatement
               | aspCallFunction
               | aspForStatement
               | aspWhileStatement
               | aspNewInstanceStatement
               | aspAssignment
               | aspExpressionStatement
               | aspCommentExpression
               | aspDimStatement
               | aspSetStatement
               | ASP_OTHER;

/*
 * New productions for procedure definitions.
 */
aspProcedure ::= aspFunctionDefinition | aspSubDefinition;

aspFunctionDefinition ::= ASP_KEYWORD_FUNCTION ASP_FUNCTION_NAME functionParameterList? CR LF aspStatements? CR LF ASP_KEYWORD_END ASP_KEYWORD_FUNCTION;

aspSubDefinition ::= ASP_KEYWORD_SUB ASP_IDENTIFIER functionParameterList? CRLF aspStatements? ASP_KEYWORD_END ASP_KEYWORD_SUB;

aspCallFunction ::= ASP_KEYWORD_CALL aspFunctionDefinition

/*
 * A comma-separated parameter list enclosed in parentheses.
 */
functionParameterList ::= ASP_LPAREN parameterList? ASP_RPAREN;
parameterList ::= ASP_IDENTIFIER | ASP_IDENTIFIER ( ASP_COMMA ASP_IDENTIFIER )*;

/*
 * Expression rules.
 * Modify aspTerm to support object member access using dot notation.
 */
aspExpression ::= ASP_LOGICAL_OPERATOR? aspTerm ( ASP_OPERATOR aspTerm )*;

/*
 * Instead of a flat aspTerm, we introduce aspPrimary so that it can optionally
 * be followed by one or more dot-access parts.
 */
aspTerm ::= aspPrimary;

aspPrimary ::= ( ASP_IDENTIFIER | ASP_NUMBER | ASP_STRING | ASP_LPAREN aspExpression ASP_RPAREN )
             ( ASP_DOT ( ASP_IDENTIFIER | ASP_NUMBER | ASP_STRING | ASP_LPAREN aspExpression ASP_RPAREN ) )*;

/*
 * Other existing rules remain unchanged (if, for, assignment, etc.).
 */
aspIfStatement ::= ASP_KEYWORD_IF aspExpression ASP_KEYWORD_THEN aspStatements ( ASP_KEYWORD_ELSE aspStatements )? ASP_KEYWORD_END;
aspForStatement ::= ASP_KEYWORD_FOR ASP_IDENTIFIER ASP_OPERATOR aspExpression ( ASP_KEYWORD_TO aspExpression )? aspStatements? ASP_KEYWORD_NEXT;
aspWhileStatement ::= ASP_KEYWORD_WHILE aspExpression aspStatements? ASP_KEYWORD_WEND;
aspAssignment ::= ASP_IDENTIFIER ASP_OPERATOR aspExpression;
aspExpressionStatement ::= aspExpression;
aspCommentExpression ::= aspExpressionStatement? ASP_COMMENT;
aspDimStatement ::= ASP_KEYWORD_DIM aspCommaSeparatedIdentifier;
aspSetStatement ::= ASP_KEYWORD_SET ASP_IDENTIFIER ASP_OPERATOR_ASSIGNMENT? aspExpression;
aspNewInstanceStatement ::= ASP_KEYWORD_SET ASP_IDENTIFIER ASP_OPERATOR_ASSIGNMENT ASP_KEYWORD_NEW ASP_INSTANCE

aspCommaSeparatedIdentifier ::= aspTerm | ( aspTerm ASP_COMMA )*;